"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/


pip install django pymysql daphne django_comment_migrate django-cors-headers drf-yasg djangorestframework-simplejwt openpyxl scrapy scrapy-splash requests user_agents pandas channels coreapi django-ratelimit
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fngi9gvv&v-^)=9^y55iie)julzti2t4^*7bcsd0tru24jttp&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
AUTH_USER_MODEL = "system.user"
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # pip install django_comment_migrate
    'django_comment_migrate',  # TODO:setting-安装这个包才会迁移数据库的注释
    'system',
    # https://github.com/adamchainz/django-cors-headers
    # pip install django-cors-headers
    'corsheaders',  # TODO:corsheaders-注册跨域app
    'rest_framework',
    # https://drf-yasg.readthedocs.io/en/stable/readme.html#installation
    # pip install -U drf-yasg
    'drf_yasg',  # TODO:swagger-注册接口文档app
    # https://django-rest-framework-simplejwt.readthedocs.io/en/latest/
    # pip install djangorestframework-simplejwt
    'rest_framework_simplejwt',  # TODO:simplejwt-注册jwt app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",  # TODO:corsheaders-注册跨域中间件
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# Password validation
from .conf import DATABASES

DATABASES = DATABASES
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

# USE_I18N = True
# USE_TZ = True  # UTC设置
# 开启了UTC, 类似aotonow的时间会获取本时区的时间然后转化为UTC时间入库
# datetime.datetime.now()获取的是不带时区的本地时间 ; django.utils.timezone.now() 获取的是时区为UTC的本地时间 因而显示的时间值是本地转化为UTC之后的时间
# 所以要是开启了 UTC 前端获取的就是带时区的时间
# t = timezone.localtime(t)  #TODO:获取时区为当前时区的时间; 时间=时间值+时区
# return timezone.datetime.strftime(t, "%Y-%m-%d %H:%M:%S")  #获取时间的时间值
# https://docs.djangoproject.com/zh-hans/4.1/topics/i18n/timezones/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # 项目下的目录
MEDIA_URL = "/media/"  # 跟STATIC_URL类似，指定用户可以通过这个url找到文件

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('system.authentication.MyJWTAuthentication', ),
    'DEFAULT_PERMISSION_CLASSES': [
        'system.permission.UrlPermisssion',
    ]
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # token有效时长
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer', ),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken', ),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

ASGI_APPLICATION = "root.asgi.application"  # asgi应用位置,可用于channels的get_default_application获取app位置

# CORS_ALLOWED_ORIGINS = ["http://127.0.0.1:8080", "http://127.0.0.1:5173"]
# CHANNEL_LAYERS = {  # channels通道,用于不通实例之间的通信
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',  # 使用redis后台, 用与存储消息
#         'CONFIG': {
#             "hosts": ["redis://127.0.0.1:6379/0"],
#         },
#     },
# }

CHANNEL_LAYERS = {  # 本地开发调试使用
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}
